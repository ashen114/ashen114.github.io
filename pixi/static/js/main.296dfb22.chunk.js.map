{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["SnakePoints","points","x","y","scale","draw","g","clear","lineStyle","moveTo","i","length","lineTo","beginFill","drawCircle","endFill","Snake","useRef","initialPoints","useMemo","push","PIXI","useState","showPoints","setShowPoints","setPoints","useTick","delta","iter","current","np","j","Math","cos","sin","interactive","pointerdown","show","image","reducer","_","data","Bunny","useReducer","motion","update","type","rotation","PI","anchor","App","indices","Uint16Array","uvs","Float32Array","w","h","vertices","width","height","options","backgroundAlpha","drawMode","TRIANGLES","text","style","align","fontFamily","fontSize","fontWeight","fill","stroke","strokeThickness","letterSpacing","dropShadow","dropShadowColor","dropShadowBlur","dropShadowAngle","dropShadowDistance","wordWrap","wordWrapWidth","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.296dfb22.chunk.js","sourcesContent":["import './App.css'\r\nimport { useReducer, useRef, useMemo, useState } from 'react'\r\nimport { Stage, Container, SimpleRope, Graphics, Sprite, useTick, SimpleMesh, Text } from '@inlet/react-pixi'\r\nimport * as PIXI from 'pixi.js'\r\n\r\nconst SnakePoints = ({ points }) => {\r\n  return (\r\n    <Graphics\r\n      x={200}\r\n      y={450}\r\n      scale={0.4}\r\n      draw={(g) => {\r\n        g.clear()\r\n        g.lineStyle(2, 0xffc2c2)\r\n        g.moveTo(points[0].x, points[0].y)\r\n\r\n        for (let i = 1; i < points.length; i++) {\r\n          g.lineTo(points[i].x, points[i].y)\r\n        }\r\n\r\n        for (let i = 1; i < points.length; i++) {\r\n          g.beginFill(0xff0022)\r\n          g.drawCircle(points[i].x, points[i].y, 10)\r\n          g.endFill()\r\n        }\r\n      }}\r\n    />\r\n  )\r\n}\r\n\r\nconst Snake = () => {\r\n  const ropeLength = 45\r\n  const i = useRef(0)\r\n\r\n  const initialPoints = useMemo(() => {\r\n    const points = []\r\n    for (let i = 0; i < 25; i++) points.push(new PIXI.Point(i * ropeLength, 0))\r\n    return points\r\n  }, [])\r\n\r\n  const [showPoints, setShowPoints] = useState(true)\r\n\r\n  const [points, setPoints] = useState(initialPoints)\r\n\r\n  useTick((delta) => {\r\n    const iter = (i.current += 0.1 * delta)\r\n    const np = [...points]\r\n\r\n    for (let j = 0; j < np.length; j++) {\r\n      np[j].x = j * ropeLength + Math.cos(j * 0.3 + iter) * 20\r\n      np[j].y = Math.sin(j * 0.5 + iter) * 30\r\n    }\r\n\r\n    setPoints(np)\r\n  })\r\n\r\n  return (\r\n    <Container interactive={true} pointerdown={() => setShowPoints((show) => !show)}>\r\n      <SimpleRope image='https://s3-us-west-2.amazonaws.com/s.cdpn.io/693612/snake.png' points={points} scale={0.4} x={200} y={450} />\r\n      {showPoints && <SnakePoints points={points} />}\r\n    </Container>\r\n  )\r\n}\r\n\r\nconst reducer = (_, { data }) => data\r\nconst Bunny = () => {\r\n  const [motion, update] = useReducer(reducer)\r\n  const iter = useRef(0)\r\n  useTick((delta) => {\r\n    const i = (iter.current += 0.03 * delta)\r\n    update({\r\n      type: 'update',\r\n      data: {\r\n        x: Math.sin(i) * 100 + 200,\r\n        y: Math.sin(i / 1.5) * 100 + 200,\r\n        rotation: Math.sin(i) * Math.PI,\r\n        anchor: Math.sin(i / 2),\r\n      },\r\n    })\r\n  })\r\n  return <Sprite image='https://s3-us-west-2.amazonaws.com/s.cdpn.io/693612/IaUrttj.png' {...motion} />\r\n}\r\n\r\nconst App = () => {\r\n  const indices = new Uint16Array([0, 3, 4, 0, 1, 4, 1, 2, 4, 2, 4, 5, 3, 4, 6, 4, 6, 7, 4, 7, 8, 4, 5, 8])\r\n\r\n  const uvs = new Float32Array([0, 0, 0.5, 0, 1, 0, 0, 0.5, 0.5, 0.5, 1, 0.5, 0, 1, 0.5, 1, 1, 1])\r\n  const w = 800\r\n  const h = 500\r\n  const vertices = new Float32Array([0, 0, w / 2, 0, w, 0, 0, h / 2, w / 2, h / 2, w, h / 2, 0, h, w / 2, h, w, h])\r\n\r\n  return (\r\n    <Stage width={800} height={800} options={{ backgroundAlpha: 0 }}>\r\n      <SimpleMesh\r\n        image='https://s3-us-west-2.amazonaws.com/s.cdpn.io/693612/placeholder.png'\r\n        uvs={uvs}\r\n        vertices={vertices}\r\n        indices={indices}\r\n        drawMode={PIXI.DRAW_MODES.TRIANGLES}\r\n      >\r\n        <Text\r\n          text='FUCK U'\r\n          anchor={0.5}\r\n          x={150}\r\n          y={150}\r\n          style={\r\n            new PIXI.TextStyle({\r\n              align: 'center',\r\n              fontFamily: '\"Source Sans Pro\", Helvetica, sans-serif',\r\n              fontSize: 50,\r\n              fontWeight: 400,\r\n              fill: ['#ffffff', '#00ff99'], // gradient\r\n              stroke: '#01d27e',\r\n              strokeThickness: 5,\r\n              letterSpacing: 20,\r\n              dropShadow: true,\r\n              dropShadowColor: '#ccced2',\r\n              dropShadowBlur: 4,\r\n              dropShadowAngle: Math.PI / 6,\r\n              dropShadowDistance: 6,\r\n              wordWrap: true,\r\n              wordWrapWidth: 440,\r\n            })\r\n          }\r\n        />\r\n        <Bunny />\r\n        <Sprite anchor={0.5} x={50} y={450} image='https://s3-us-west-2.amazonaws.com/s.cdpn.io/693612/IaUrttj.png' />\r\n        <Sprite anchor={0.5} x={100} y={400} image='https://s3-us-west-2.amazonaws.com/s.cdpn.io/693612/IaUrttj.png' />\r\n        <Sprite anchor={0.5} x={175} y={405} image='https://s3-us-west-2.amazonaws.com/s.cdpn.io/693612/IaUrttj.png' />\r\n        <Snake />\r\n      </SimpleMesh>\r\n    </Stage>\r\n  )\r\n}\r\n\r\nexport default App\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}